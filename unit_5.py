# -*- coding: utf-8 -*-
"""unit 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19csw8m9cJVisQU9evxTAExFEml7F15xo
"""

!pip install geopandas

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# geodata
import geopandas as gpd
from shapely.geometry import Point

# custom y-axis
from matplotlib.ticker import FuncFormatter
def millions(x, pos):
    return '%1.1fM' % (x * 1e-6)

# ignoring warnings
import warnings
warnings.simplefilter("ignore")

# NLP
import unicodedata
import string
import re
import nltk
from nltk.corpus import stopwords
from nltk.util import ngrams
from wordcloud import WordCloud, STOPWORDS
from collections import Counter, defaultdict
from sklearn.feature_extraction.text import CountVectorizer
from textblob import TextBlob
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# kaggle workspace
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from google.colab import drive
drive.mount('/content/drive')

cricket = pd.read_csv('/content/drive/My Drive/T20_Worldcup_tweets.csv')
football = pd.read_csv('/content/drive/My Drive/FIFA.csv')
print('cricket dataset shape: {}'.format(cricket.shape))
print('football dataset shape: {}'.format(football.shape))

cricket.info()

football.info()

cricket.head()

football.head()

"""country wise analysis"""

cricket_nan = pd.Series(cricket.isna().sum()[cricket.isna().sum() > 0].
                      sort_values(ascending = False))
football_nan = pd.Series(football.isna().sum()[football.isna().sum() > 0].
                      sort_values(ascending = False))

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17, 5))
sns.set_style("whitegrid")
fig.suptitle('NaN values', size = 15)

sns.barplot(y = cricket_nan.index, x = [len(cricket)] * len(cricket_nan),
            edgecolor = 'black', color = 'white', alpha = 0.6, ax = ax1)
sns.barplot(y = cricket_nan.index, x = cricket_nan,
            edgecolor = 'black', alpha = 0.8, ax = ax1,
            palette = sns.color_palette("viridis", len(cricket_nan)))
ax1.get_xaxis().get_major_formatter().set_scientific(False)
ax1.set_title('cricket dataset', size = 13)


sns.barplot(y = football_nan.index, x = [len(football)] * len(football_nan),
            edgecolor = 'black', color = 'white', alpha = 0.6, ax = ax2)
sns.barplot(y = football_nan.index, x = football_nan,
            edgecolor = 'black', alpha = 0.8, ax = ax2,
            palette = sns.color_palette("viridis", len(football_nan)))
ax2.get_xaxis().get_major_formatter().set_scientific(False)
ax2.set_title('football dataset', size = 13)

sns.despine()

cricket_tweets_location = cricket.location.value_counts()[:10]
football_tweets_Location = football.Location.value_counts()[:10]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 8))
sns.set_style("whitegrid")
fig.suptitle("Tweet authors by countries", size = 15)

sns.barplot(y = cricket_tweets_location.index,
            x = [len(cricket)] * len(cricket_tweets_location),
            edgecolor = 'black', color = 'white', alpha = 0.6, ax = ax1)
sns.barplot(y = cricket_tweets_location.index,
            x = cricket_tweets_location,
            edgecolor = 'black', color = 'red', alpha = 0.5, ax = ax1)
ax1.get_xaxis().get_major_formatter().set_scientific(False)
ax1.set_xlabel('')
ax1.set_title('cricket', size = 15)


sns.barplot(y = football_tweets_Location.index,
            x = [len(football)] * len(football_tweets_Location),
           edgecolor = 'black', color = 'white', alpha = 0.6, ax = ax2)
sns.barplot(y = football_tweets_Location.index,
            x = football_tweets_Location,
            edgecolor = 'black', color = 'blue', alpha = 0.5, ax = ax2)
ax2.get_xaxis().get_major_formatter().set_scientific(False)
ax2.set_xlabel('')
ax2.set_title('football', size = 15)

sns.despine()

"""likes analysis"""

cricket_count = pd.DataFrame(cricket['name'].value_counts())
cricket_count = pd.DataFrame({'name': cricket_count.index,
                            'count': cricket_count.name})
cricket_likes = cricket[['name', 'favourites']].groupby('name').sum()
cricket_agg = pd.merge(cricket_count, cricket_likes, on = 'name',
                     how = 'left')


football_count = pd.DataFrame(football['name'].value_counts())
football_count = pd.DataFrame({'name': football_count.index,
                            'count': football_count.name})
football_likes = football[['name', 'Likes']].groupby('name').sum()
football_agg = pd.merge(football_count, football_likes, on = 'name',
                     how = 'left')

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))
sns.set_style("whitegrid")
fig.suptitle("The dependence of likes sums on tweets amounts", size = 15)


sns.scatterplot(x = cricket_agg['count'], y = cricket_agg['favourites'],
                color = 'red', ax = ax1)
ax1.get_yaxis().get_major_formatter().set_scientific(False)
ax1.set_xlabel('Amount of tweets')
ax1.set_ylabel('Sum of likes')
ax1.set_title('cricket', size = 13)


sns.scatterplot(x = football_agg['count'], y = football_agg['Likes'],
                color = 'blue', ax = ax2)
ax2.get_yaxis().get_major_formatter().set_scientific(False)
ax2.set_xlabel('Amount of tweets')
ax2.set_ylabel('Sum of likes')
ax2.set_title('football', size = 13)

fig.show()

print('Average number of likes per tweet (cricket): {}'.
      format(round(cricket_agg['favourites'].sum() / cricket_agg['count'].sum(), 0)))
print('Average number of likes per tweet (football): {}'.
      format(round(football_agg['Likes'].sum() / football_agg['count'].sum(), 0)))

"""followers based analysis"""

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))
sns.set_style("whitegrid")
fig.suptitle("Top users by tweets amount", size = 15)

sns.barplot(x = cricket_agg['count'][:10], y = cricket_agg['name'][:10],
            color = 'red', edgecolor = 'black', alpha = 0.8, ax = ax1)
ax1.get_xaxis().get_major_formatter().set_scientific(False)
ax1.set_xlabel('')
ax1.set_ylabel('name')
ax1.set_title('cricket', size = 13)


sns.barplot(x = football_agg['count'][:10], y = football_agg['name'][:10],
            color = 'blue', edgecolor = 'black', alpha = 0.8, ax = ax3)
ax3.get_xaxis().get_major_formatter().set_scientific(False)
ax3.set_xlabel('')
ax3.set_ylabel('name')
ax3.set_title('football', size = 13)


sns.barplot(x = cricket['followers'][:10],
            y = cricket['name'][:10],
            color = 'red', edgecolor = 'black', alpha = 0.8, ax = ax2)
ax2.get_xaxis().get_major_formatter().set_scientific(False)
ax2.get_yaxis().set_visible(False)
ax2.set_xlabel('')
ax2.set_title('User followers count', size = 13)


sns.barplot(x = football['followers'][:10],
            y = football['name'][:10],
            color = 'blue', edgecolor = 'black', alpha = 0.8, ax = ax4)
ax4.get_xaxis().get_major_formatter().set_scientific(False)
ax4.get_yaxis().set_visible(False)
ax4.set_xlabel('')
ax4.set_title('User followers count', size = 13)

fig.show()

"""length of the tweets"""

cricket['text'][19529]

football['text'][11650]

# Tweet cleaner
def tweet_cleaner(text):
    return text

cricket_cleaned = cricket.copy()
football_cleaned = football.copy()

cricket_cleaned['text'] = cricket_cleaned['text'].apply(lambda x:tweet_cleaner(x))
football_cleaned['text'] = football_cleaned['text'].apply(lambda x:tweet_cleaner(x))

cricket_text_length = cricket_cleaned.text.str.len()
football_text_length = football_cleaned.text.str.len()

sns.set_style("whitegrid")
plt.figure(figsize=(14, 5))

sns.distplot(cricket_text_length, label = 'cricket', color = 'red', kde = False)
sns.distplot(football_text_length, label = 'football', color = 'blue', kde = False)
plt.legend(prop={'size': 14})
plt.title('Tweet length', size = 15)
plt.xlabel('Length of tweet (symbols)')
plt.show()

"""no of words in tweets"""

cricket['date'] = pd.to_datetime(cricket['date'])
cricket['hour'] = cricket['date'].apply(lambda x: x.hour)
cricket['month'] = cricket['date'].apply(lambda x: x.month)
cricket['day'] = cricket['date'].apply(lambda x: x.day)
cricket.head()

football['Date'] = pd.to_datetime(football['Date'])
football['hour1'] = football['Date'].apply(lambda x: x.hour)
football['month1'] = football['Date'].apply(lambda x: x.month)
football['day1'] = football['Date'].apply(lambda x: x.day)
football.head()

sns.countplot(x='hour', data = cricket)

sns.countplot(x='hour1', data = football)